#include "Hooks.hpp"
#include "H3API.hpp"

using namespace h3;

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//
//	Custom structures and functions
//
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//
//	Global variables
//
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

Patcher *_P;
PatcherInstance *_PI;

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//
//	Hooks
//
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
BOOL8 GDoubleClicked;
constexpr INT MT_DOUBLECLICK = 0x80;
int __stdcall _HH_CheckDoubleClick(HiHook* h, H3InputManager* This, int* a2)
{
	auto& msg = This->GetCurrentMessage();
	if (msg.message != MT_DOUBLECLICK)
		GDoubleClicked = false;
	else
	{
		msg.message = H3InputManager::eMessageType::MT_LBUTTON_DBLCLK; // reset to h3 default value
		GDoubleClicked = true;
		F_MessageBox("Double-click detected!");
	}

	return THISCALL_2(int, h->GetDefaultFunc(), This, a2);
}

void hooks_init(PatcherInstance* pi)
{
	H3Patcher::DwordPatch(0x4EC3F2 + 2, MT_DOUBLECLICK);
	pi->WriteHiHook(0x4EC660, SPLICE_, THISCALL_, _HH_CheckDoubleClick);
}